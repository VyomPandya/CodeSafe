console.warn("OpenRouter API key not found, local analysis will be used as fallback");async function u(e,r="mistralai/mistral-7b-instruct-v0.2:free"){var t;const l=await e.text(),n=(t=e.name.split(".").pop())==null?void 0:t.toLowerCase();return console.warn("OpenRouter API key not found, using local analysis"),a(l,n||"",e.name)}function a(e,r,l){const n=[];if(r==="js"||r==="ts"||r==="jsx"||r==="tsx"){e.includes("eval(")&&n.push({severity:"high",message:"Use of eval() can be dangerous and lead to code injection vulnerabilities",line:e.split(`
`).findIndex(i=>i.includes("eval("))+1,rule:"no-eval",improvement:"Replace eval() with safer alternatives such as Function constructor or JSON.parse() for JSON data. Consider restructuring your code to avoid dynamic code execution."}),e.includes("dangerouslySetInnerHTML")&&n.push({severity:"high",message:"dangerouslySetInnerHTML can lead to XSS vulnerabilities",line:e.split(`
`).findIndex(i=>i.includes("dangerouslySetInnerHTML"))+1,rule:"no-dangerous-html",improvement:"Use safer alternatives like React components and props. If you must use HTML, ensure all user input is properly sanitized using a library like DOMPurify."}),e.includes("innerHTML")&&n.push({severity:"medium",message:"Use of innerHTML can lead to XSS vulnerabilities",line:e.split(`
`).findIndex(i=>i.includes("innerHTML"))+1,rule:"no-inner-html",improvement:"Use safer DOM manipulation methods like textContent or createElement() and appendChild(). For frameworks like React, use their built-in components and props system."});const t=/password.*=.*['"][^'"]*['"]/i;t.test(e)&&n.push({severity:"medium",message:"Hardcoded password detected",line:e.split(`
`).findIndex(i=>t.test(i))+1,rule:"no-hardcoded-secrets",improvement:"Use environment variables or a secure vault service to store sensitive information. Never hardcode secrets in your source code."}),e.split(`
`).map((i,o)=>({line:i,index:o})).filter(({line:i})=>i.includes("console.log")).forEach(({index:i})=>{n.push({severity:"low",message:"Console statements should be removed in production code",line:i+1,rule:"no-console",improvement:"Remove console.log statements or replace with proper logging that can be disabled in production. Consider using a logging library that supports different log levels."})}),(e.includes("TODO")||e.includes("FIXME"))&&n.push({severity:"low",message:"TODO or FIXME comment found",line:e.split(`
`).findIndex(i=>i.includes("TODO")||i.includes("FIXME"))+1,rule:"no-todo-comments",improvement:"Address the TODO/FIXME comments before deploying to production. If it's a known limitation, document it properly and create an issue in your project management system."})}return r==="py"&&(e.includes("exec(")&&n.push({severity:"high",message:"Use of exec() can lead to code injection vulnerabilities",line:e.split(`
`).findIndex(s=>s.includes("exec("))+1,rule:"no-exec",improvement:"Avoid using exec() entirely. Restructure your code to use more specific functions or modules that perform the required functionality without executing arbitrary code."}),e.includes("pickle.loads")&&n.push({severity:"high",message:"Unsafe deserialization using pickle can lead to code execution",line:e.split(`
`).findIndex(s=>s.includes("pickle.loads"))+1,rule:"no-unsafe-deserialization",improvement:"Use safer serialization alternatives like JSON, YAML, or MessagePack. If pickle is necessary, only unpickle data from trusted sources and consider using safer modules like marshmallow."}),e.split(`
`).map((s,i)=>({line:s,index:i})).filter(({line:s})=>s.includes("input(")).forEach(({index:s})=>{n.push({severity:"medium",message:"Input should be type-checked and sanitized",line:s+1,rule:"validate-input",improvement:"Always validate and sanitize user input. Use type conversion functions like int() or float() with try/except blocks, or use input validation libraries like Pydantic."})}),e.includes("shell=True")&&n.push({severity:"medium",message:"Using shell=True with subprocess can be dangerous",line:e.split(`
`).findIndex(s=>s.includes("shell=True"))+1,rule:"no-shell-true",improvement:"Avoid using shell=True with subprocess. Instead, pass the command as a list of arguments and set shell=False (the default). This prevents shell injection attacks."})),r==="java"&&(e.includes("Runtime.getRuntime().exec(")&&n.push({severity:"high",message:"Using Runtime.exec() can be dangerous for command execution",line:e.split(`
`).findIndex(s=>s.includes("Runtime.getRuntime().exec("))+1,rule:"no-runtime-exec",improvement:"Use ProcessBuilder instead, which has better security features. Always validate and sanitize any user input that goes into command execution."}),e.includes("printStackTrace")&&n.push({severity:"medium",message:"printStackTrace exposes implementation details",line:e.split(`
`).findIndex(s=>s.includes("printStackTrace"))+1,rule:"no-stacktrace-print",improvement:"Use a proper logging framework like SLF4J or Log4j. Pass exceptions to the logger rather than printing stack traces directly."}),e.split(`
`).map((s,i)=>({line:s,index:i})).filter(({line:s})=>s.includes("System.out.println")).forEach(({index:s})=>{n.push({severity:"low",message:"System.out.println should be replaced with proper logging",line:s+1,rule:"use-logger",improvement:"Replace System.out.println with a proper logging framework like SLF4J or Log4j. This provides better control over log levels and output destinations."})}),(e.includes(" == null")||e.includes(" != null"))&&n.push({severity:"low",message:"Consider using Optional to handle null values",line:e.split(`
`).findIndex(s=>s.includes(" == null")||s.includes(" != null"))+1,rule:"use-optional",improvement:"Use Java's Optional<T> type to represent optional values instead of null checks. This makes the API more explicit and helps prevent NullPointerExceptions."})),n}export{u as analyzeCode};
